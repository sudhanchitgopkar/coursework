                         _____________________

                          THEORY OF COMPUTING

                           Sudhan Chitgopkar
                         _____________________


02.02.21
========

Reviewing delta
~~~~~~~~~~~~~~~

DFAs
----

  - delta: Q * Sigma -> Q
  - input: (state, symbol)
  - output: state


NFAs
----

  - Not allowing epsilon transitions
    - delta: Q * Sigma -> \powerset(Q)
    - input: (state, symbol)
    - output: set of states
  - If an automaton is nondeterministic, then the codomain of delta is a
    power set
  - Allowing epsilon transitions,
    - delta: Q * (\Simga [union] {epsilon}) -> \powerset(Q)
    - input: (state, symbol or epsilon)
    - output: set of states
  - Note that epsilon is not a symbol and cannot belong to Sigma
    - This is because symbols have a length of 1 and epsilon, by
      definition, has a length of 0


NFA
~~~

  - General 5-tuple including
    1. Q: set of states
    2. Sigma - input alphabet
    3. delta: Q * (Sigma [union] {epsilon}) -> \powerstate(Q)
    4. q_{0} [element of] Q - starting state
    5. F [subset of] Q - set of final states
  - There may exist some inputs for which it is possible that the NFA
    accepts the sequence if one path is taken and rejects the sequence
    if another path is taken
  - The NFA does not have the ability to look ahead at possible states


Computation
~~~~~~~~~~~

  - The NFA runs all possible branches on a given string simultaneously
    and independently
  - A string, w, is rejected by an NFA, N, if every branch of the
    nondeterminism tree for N on w rejects
    - [angled dash] [there exists] a branch that accepts
  - A string, w, is accepted by an NFA, N, if [there exists] a branch on
    the nondeterminism tree for which N on w accepts
  - Theorem: Any language recognized by an NFA can be recognized by a
    DFA
    - Let N be an NFA.
    - Then [there exists] a DFA, M, with L(M) = L(N)
    - The language recognized by a machine, M, (L(M)) is the set of
      exactly all strings accepted by M (no rejected strings allowed)
      - [angled dash] L(M) = set of all strings rejected by M


01.28.21
========

Nondeterministic Finite Automata
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DFA Review
----------

  - DFA's are 5-tuples with
    - delta: Q * Sigma -> Q
    - The number of transitions, delta, is |Q||Sigma|
  - There is no real decision-making here, an input is simply being used
    alongside a rule to find an output


NFA's
-----

  - NFAs are also a 5-tuple
  - delta: Q * Sigma -> \mathbb{P}(Q)
  - |\mathbb{P}(Q)| = 2^{|Q|}


01.26.21 - 01.28.20
===================

Closure Introduction
~~~~~~~~~~~~~~~~~~~~

  - The language recognized by a DFA, M, (L(M)) is the set of all string
    accepted by M
  - Thus, M = (Q, Sigma, delta, q_{0},F)
  - And Sigma* is the universe of all possible inputs to M
  - [for all] strings w [element of] Sigma*, M either accepts or rejects
    w
  - It follows that L(M) [subset of] Sigma*
  - And [angled dash] L(M) = Sigma* - L(M)
  - Therefore, M accepts every string in L(M) and rejects everything in
    [angled dash] L(M)


Closure Continued
~~~~~~~~~~~~~~~~~

  - A set, A, is closed under a binary operation, OP, if [for all] x , y
    [element of] A [x OP y [element of] A]
  - Ex. Natural Numbers ($\mathbb{N}$)
    a. $\mathbb{N}$ is closed under +
    b. $\mathbb{N}$ is closed under *
    c. $\mathbb{N}$ is not closed under -
    d. $\mathbb{N}$ is not closed under \
  - The class of all languages that are recognized by DFAs is closed
    under [union]


Closure Properties of DFAs
~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Union ([union])
  - Intersection ([intersection])
  - Complement ([angled dash])
  - Reverse


Applying Closure Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - If L(M_{1}) [union] L(M_{2}) are DFAs, then [there exists] DFA, M,
    with L(M) = L(M_{1}) [union] L(M_{2})
  - The purpose of a state machine is to make a yes/no decision


Premise:
--------

  - M_{1} = {Q_{1},Sigma,delta_{1},q_{0_{1}},F_{1}} and M_{2} =
    {Q_{2},Sigma,delta_{2},q_{0},F_{2}} are DFAs
  - M_{1} accepts binary strings ending in 1
  - M_{2} accepts binary strings of odd length
  - L(M) = L(M_{1}) [union] L(M_{2})
    - Accepts binary strings that either end in 1 OR have odd length (or
      both)
  - M_{1}: q_{1}, q_{2} distinguished between ending in 0 and 1
  - M_{2}: r_{1}, r_{2} distinguished between odd and even length
  - Accordingly, M must be able to distinguish between:
    - even length ending in 1
    - even length ending in 0
    - odd length ending in 1
    - odd length ending in 0


Coding M
--------

  - Consider Q = Q_{1} [dot] Q_{2} =
    {q_{1}r_{1},q_{2}r_{1},q_{1}r_{2},q_{2}r_{2}}
  - wherein
    - q_{1}r_{1} = even string ending in 0
    - q_{1}r_{2} = odd string ending in 0
    - q_{2}r_{1} = even string ending in 1
    - q_{2}r_{2} = odd string ending in 1
  - Ex. delta(q_{1}r_{1},1) = q_{1}r_{2}
  - Applying this logic to a DFA, we know that
    - Q={q1r1,q1r2,q2r1,q2r2};
    - S={0,1};
    - d:Q \*sigma -> Q;
    - d(q1r1,0)=q1r2;
    - d(q1r1,1)=q2r2;
    - d(q1r2,0)=q1r1;
    - d(q1r2,1)=q2r1;
    - d(q2r1,0)=q1r2;
    - d(q2r1,1)=q2r2;
    - d(q2r2,0)=q1r1;
    - d(q2r2,1)=q2r1;
    - q0=q1r1;
    - F={q1r2,q2r1,q2r2};


Derivation
----------

  - Construct M and show that L(M) = L(M_{1}) [union] L(M_{2}).
  - Q = Q_{1} [dot] Q_{2}
  - let q_{i} [element of] Q_{1} and let r_{j} [element of] Q_{2}. and
    let c [element of] Sigma
  - and q_{i}r_{j} [element of] Q
  - thus, delta( q_{i}r_{j},c) = delta_{1}(q_{i},c)delta_{2}(r_{j},c)
  - and q_{0} = q_{0}_{1},q_{0}_{2}
  - so that F={q_{i}r_{j}: q_{i} [element of] F_{1} [union] r_{j}
    [element of] F_{2}}


Correctness
-----------

  - Show that M accepts exactly the strings that are accepted by M_{1}
    or M_{2}
  - If w [element of] Sigma*. tjem w is accepted by M and w is accepted
    by either M_{1} or M{2}
  - To do this, we can organize Sigma* into strings of length 0, length
    1, length 2...
  - We solve with mathematical induction, which is how we prove
    recurrence relationships


Mathematical Induction
----------------------

  - Need base case and induction hypothesis
  - Induction hypothesis says something is true about k, where k is the
    length of strings
  - delta* (q_{0},w) is the ending state of M on w where
  - delta* (q_{0},w) = delta*_{1}(q_{0}_{1},w)delta*_{2}(q_{0}_{2},w)
  - Induction Hypothesis: If |w| = k, then delta*(q_{0},w) [element of]
    F \iff delta*_{1}(q_{0_{1}},w) [element of] F_{1} or
    delta*_{2}(q_{0}_{2},w) inf F_{2}
  - Let x [element of] Sigma.
  - Then |w [dot] x| = k+1
  - And delta*(q_0,wx) =
    delta*_{1}(q_{0}_{1},wx)delta*_{2}(q_{0}_{2},wx)
  - If delta*_{1}(q_{0}_{1},wx) [element of] F_{1}, delta*(q_0,wx)
    [element of] F
  - Similarly, if delta*_{2}(q_{0}_{2},wx), then delta*(q_0,wx) [element
    of] F


01.21.21
========

Deterministic Finite Automata
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - We know that delta = Q * Sigma -> Q_{2}
  - We want a function that takes a starting state and a string, then
    returns the state after the machine has read that string
  - Let's define delta* = Q * Sigma* -> Q
    - delta* takes a state and a string
    - delta takes a state and a symbol
  - Now, we need a recursive definition
    - Base case:
      - Let q_{i} [element of] Q
      - delta*(q_{i},epsilon) = q_{i}
    - Recursive step:
      - If q_{i} [element of] Q, w [element of] Sigma*, and c [element
        of] Sigma
      - then delta*(q, w [dot] c) = delta(delta*(q_{i},w),c)


Aside: On Sigma and Sigma*
~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Sigma* is the universe of all strings over Sigma
    - Sigma = {0,1}
    - Sigma* = {epsilon,0,1,00,01,11,10,000,...}
  - We can see this recursively
    - Base step: epsilon [element of] Sigma*
    - Recursive step:
    - Let w [element of] Sigma*, let c [element of] Sigma
    - Then w * c [element of] Sigma*
  - We can see this recursion graphically
   w        c  w [dot] c  step      
  ----------------------------------
   epsilon             -  base      
   epsilon  1          1  recursive 
   1        0         10  recursive 
   10       1        101  recursive 


Recursively Testing 101
~~~~~~~~~~~~~~~~~~~~~~~

  - Solve delta*(q_{1},101)
  - delta(delta*(q_{1},10),1)
  - delta*(q_{1},10)
  - delta(delta*(q_{1},1),0)


TODO Complete Recursion Sequence
--------------------------------


01.19.21
========

Tuples & DFAs
~~~~~~~~~~~~~

  - Tuples are sequences which are always finite in length
  - The deterministic finite automaton shown is a 5-tuple:
    1. Q: finite nonempty set of states
       - state: configuration of logic of a machine
    2. Sigma (Sigma) - input alphabet
       - alphabet: a finite, nonempty set of symbols where symbols are
         an object of length 1
    3. delta (Delta) - transition function
    4. Q_{0} [element of] Q - starting state
    5. F [subset of] Q - set of final states
  - For this deterministic finite automaton,
    - delta: Q * Sigma -> Q_{2}
    Represented as a table,
   Step  State  Input  Transition     
  ------------------------------------
      1  Q_{1}      1  Q_{1} -> Q_{2} 
      2  Q_{2}      0  Q_{2} -> Q_{1} 
      3  Q_{1}      1  Q_{1} -> Q_{2} 
      4  Q_{2}      1  Q_{2} -> Q_{2} 


Domains & Codomains
~~~~~~~~~~~~~~~~~~~

  - Domain: set of all possible function inputs
  - Codomain: set of all possible outputs


Strings
~~~~~~~

  - In computer science, strings are character arrays
  - In mathematics, strings are sequences of symbols
  - Specifically a string over an alphabet, Sigma, is a sequence of
    symbols belonging to Sigma
  - epsilon is the empty string
  - Concatenation: If w_{1}, w_{2} [element of] Sigma, w_{1} [dot] w_{2}
    = w_{1}w_{2}
  - If c [element of] Sigma, then epsilon [dot] c = c [dot] epsilon = c


TODO Review Recursive Definitions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Base step: a step that can not be broken down any further, a fact
    that is always true regardless of the input
  - Recursive step:
  - Defining the length of a string over Sigma
    - Base: |epsilon| = 0
    - Recursive:
      - let w be a string over Sigma, and c [element of] Sigma
      - then |w [dot] c| = |w| + 1
  - Using this to define |1011|,
    1) |1011| = |101 [dot] 1| = |101| + 1 =
    2) |10 [dot] 1| + 1 = |10| + 1 + 1 =
    3) |1 [dot] 0| + 1 + 1 = |1| + 1 + 1 + 1 =
    4) |epsilon [dot] 1| + 1 + 1 + 1 =
    5) |epsilon| + 1 + 1 + 1 + 1 =
    6) 0 + 1 + 1 + 1 + 1 = 4


Languages
~~~~~~~~~

  - Languages over Sigma - a set of finite strings over Sigma
  - Langauges recognized by an automaton, M, L(M) is the language
    accepted by M
  - [empty set] is the empty language
  - epsilon [not equal to] [empty set]
  - epsilon [not equal to] {epsilon}
  - epsilon is not a symbol in any alphabet


01.14.21
========

Automaton (automata)
~~~~~~~~~~~~~~~~~~~~

  - Self running machine requiring a continuous power source
    - Historically used power sources include water, steam, and
      electricity
  - Course revolves around defining the mathematics powering machines


The Mathematics of Automata
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mathematicians & History
------------------------

  - Cantor defines sets as collections of objects
  - Cantor also argues that infinites can be of different magnitudes -
    there are infinitely more real numbers than natural numbers
  - Goedel eventually derives his incompleteness theorem
    - No logical system that contains the natural numbers can prove its
      own soundness
    - Every sound logical system containing the natural numbers contains
      valid statements that cannot be proved or disproved
  - In 1936, Turing proves The Halting Problem is not decidable, it is
    impossible
    - The Halting Problem is an algorithm that can analyze any other
      algorithm and determine whether or not it goes into an infinite
      loop
  - Turing creates the turing machine as an object consisting of sets
    and processes wherein the object can use any finite process to
    complete an action.
  - Turing machine sets the basis for a computer, which leads to a
    series of important questions:
    - What can & can't a machine do?
    - What does it mean for a problem ot be harder than another?
    - What does it mean for a machine to be more powerfule than another?


Sequential Logic
----------------

  - Sentential Logic- based on boolean results
    - Predicated on AND, OR, NOT
    - XOR, XAND, etc. can be derived using the above


Necessary Review
~~~~~~~~~~~~~~~~

  - Textbook Ch. 0
  - Logic Statements
  - Set Theory
  - Functions


Functions
~~~~~~~~~

  - Functions - something that maps objects from one set to another
  - Given f: a -> b;
    - Everything in a is mapped to something in b
      - For every x, such that x is an element of a, there exists a y,
        such that y is an element of b
    - No one point in the domain can be mapped to two different points
      in the codomain
      - Logically, you can't have a function that takes in one input and
        returns two different outputs
      - If f maps x -> y1 and -> y2, y1 = y2
      -[for all] x [element of] A y_{1},y_{2} [element of] B [f(x)=y_{1}
       [logical and] f(x)=y_{2} -> y_{1} = y_{2}]


TODO Types of Functions - Definition & Logical Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Injective Functions
  - Surjective Functions
  - Proof by Induction ([for all])
  - Proof by Contradiction ([angled dash][there exists])


Finite Automaton (Finite State Machine)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - States are logical confirgurations
  - States are generally based upon input
  - Purpose of a state machine is to make a yes/no decision
